# Project Exhibition - Review 2: Canva Air
# Python program to demonstrate the hand tracking module 
# this module will be further used in the program to demonstrate the air canvas

# importing required Python libraries for image analysis and computer vision

import cv2 # computer vision library for image analysis and processing
import mediapipe as mp # library that provides ML solutions for computer vision tasks 

mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_hands = mp.solutions.hands

# for handling static images:
# this treats the webcam input as a stream of unrelated, static images
# however, by changing the value of the boolean variable, the input can be treated as a video stream

IMAGE_FILES = []
with mp_hands.Hands(
    static_image_mode=True,
    max_num_hands=2,
    min_detection_confidence=0.5) as hands:
  for idx, file in enumerate(IMAGE_FILES):
    
    # reading an image, flipping it around y-axis for correct handedness output 
    # handedness determines whether the hand is a left hand or a right hand
    # it is determined assuming the input image is mirrored, hence the image is flipped to get correct handedness
    
    image = cv2.flip(cv2.imread(file), 1)
    
    # converting the image from the BGR format to the RGB format before processing 
    
    results = hands.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

    # printing handedness and drawing hand landmarks on the image
    
    print('Handedness:', results.multi_handedness)
    if not results.multi_hand_landmarks:
      continue
    image_height, image_width, _ = image.shape
    annotated_image = image.copy()
    for hand_landmarks in results.multi_hand_landmarks:
      print('hand_landmarks:', hand_landmarks)
      print(
          f'Index finger tip coordinates: (',
          f'{hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].x * image_width}, '
          f'{hand_landmarks.landmark[mp_hands.HandLandmark.INDEX_FINGER_TIP].y * image_height})'
      )
      mp_drawing.draw_landmarks(
          annotated_image,
          hand_landmarks,
          mp_hands.HAND_CONNECTIONS,
          mp_drawing_styles.get_default_hand_landmarks_style(),
          mp_drawing_styles.get_default_hand_connections_style())
    cv2.imwrite(
        '/tmp/annotated_image' + str(idx) + '.png', cv2.flip(annotated_image, 1))
    
    # drawing hand world landmarks
    
    if not results.multi_hand_world_landmarks:
      continue
    for hand_world_landmarks in results.multi_hand_world_landmarks:
      mp_drawing.plot_landmarks(
        hand_world_landmarks, mp_hands.HAND_CONNECTIONS, azimuth=5)

# for handling webcam input:

cap = cv2.VideoCapture(0)
with mp_hands.Hands(
    model_complexity=0,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5) as hands:
  while cap.isOpened():
    success, image = cap.read()
    if not success:
      print("Input not found. Please check your webcam and try again.")
      # if loading a video, use the 'break' statement instead of the 'continue' statement    
      continue

    # for improving the performance, we optionally mark the image as not writeable to pass by reference
    
    image.flags.writeable = False
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = hands.process(image)

    # drawing the hand annotations on the image
    
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
    if results.multi_hand_landmarks:
      for hand_landmarks in results.multi_hand_landmarks:
        mp_drawing.draw_landmarks(
            image,
            hand_landmarks,
            mp_hands.HAND_CONNECTIONS,
            mp_drawing_styles.get_default_hand_landmarks_style(),
            mp_drawing_styles.get_default_hand_connections_style())
        
    # flipping the image horizontally for a selfie-view display
    
    cv2.imshow('MediaPipe Hands', cv2.flip(image, 1))

    # pressing the 'q' button for exiting the program
    
    if cv2.waitKey(2) & 0xFF == ord('q'):
      break
    
# shutting down the program and closing the terminal window

cap.release()
cv2.destroyAllWindows()